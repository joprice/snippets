syntax on " enable syntax processing

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'ap/vim-buftabline'
" TODO: try this instead - https://github.com/tomtom/tcomment_vim
Plug 'sudar/comments.vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
" color theme
Plug 'dracula/vim'
" ocaml syntax errors
Plug 'w0rp/ale'
"Plug 'vim-syntastic/syntastic'
"Plug 'reasonml-editor/vim-reason-plus'
Plug 'jordwalke/vim-reasonml'
" autocompleter
Plug 'udalov/kotlin-vim'
Plug 'dln/avro-vim'
Plug 'GEverding/vim-hocon'
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'copy/deoplete-ocaml'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'figitaki/vim-dune'
Plug 'LnL7/vim-nix'
Plug 'neo4j-contrib/cypher-vim-syntax'
Plug 'robbles/logstash.vim'
Plug 'hashivim/vim-terraform'
Plug 'rhysd/vim-clang-format'
Plug 'cstrahan/vim-capnp'
" required by vim-bazel
Plug 'google/vim-maktaba'
Plug 'bazelbuild/vim-bazel'
Plug 'cespare/vim-toml'
Plug 'gre/play2vim'
Plug 'fatih/vim-go'
Plug 'derekwyatt/vim-scala'
Plug 'derekwyatt/vim-sbt'
Plug 'kien/rainbow_parentheses.vim'
Plug 'plasticboy/vim-markdown'
Plug 'ekalinin/Dockerfile.vim'
Plug 'solarnz/thrift.vim'
Plug 'tfnico/vim-gradle'
Plug 'leafgarland/typescript-vim'
Plug 'rust-lang/rust.vim'
Plug 'idris-hackers/idris-vim'
Plug 'uarun/vim-protobuf'
Plug 'keith/swift.vim'
Plug 'raichoo/purescript-vim'
Plug 'r0mai/vim-djinni'
Plug 'ElmCast/elm-vim'
Plug 'tpope/vim-fugitive'
Plug 'ctrlpvim/ctrlp.vim'
call plug#end()

" disable vi backwards compatibility
set nocompatible
set encoding=utf-8
set autoread
set tabstop=2     " number of visual spaces per TAB
set softtabstop=2 " number of spaces in tab when editing
set shiftwidth=2
set autoindent
set expandtab     " tabs are spaces
set number        " show line numbers
set showcmd       " show command in bottom bar
set cursorline    " highlight current line
set wildmode=longest,list,full " show autocomplete
set wildmenu " visual autocomplete for commands
set wildchar=<Tab>
set ttyfast

set lazyredraw " redraw only when we necessary
" searching
set ignorecase
set smartcase
set incsearch " search as characters are typed
set hlsearch " highlight search matches
set showmatch           " highlight matching braces

set nowritebackup
set backspace=2
set listchars=tab:>\ ,trail:.
set termguicolors

"autocmd FileType netrw setl bufhidden=delete
set hidden
" make exiting insert mode fast
set timeoutlen=1000 ttimeoutlen=0
" keep extra lines/columns around cursor to see past while scrolling
set scrolloff=2
set sidescrolloff=5

" disable annoying popup menu when choosing a completion
set completeopt-=preview
set completeopt+=longest,menuone
",noinsert


match ErrorMsg '\%>100v.\+'

let g:vim_markdown_folding_disabled=1

"set mouse=a

au BufNewFile,BufRead Podfile,*.podspec      set filetype=ruby"
au BufRead,BufNewFile dune setf jbuilder

let g:python3_host_prog = '/usr/local/bin/python3'

" this is the default, make sure it is not set to "omnifunc" somewhere else in your vimrc
let g:deoplete#complete_method = "complete"
" other completion sources suggested to disable
let g:deoplete#ignore_sources = {}
let g:deoplete#ignore_sources.ocaml = ['buffer', 'around', 'member', 'tag']
" no delay before completion
let g:deoplete#auto_complete_delay = 0

" https://github.com/ocaml/merlin/wiki/vim-from-scratch

if executable('opam')
  let g:opamshare=substitute(system('opam config var share'),'\n$','','''')
  if isdirectory(g:opamshare."/merlin/vim")
    execute "set rtp+=" . g:opamshare."/merlin/vim"
  endif
endif

color dracula

" TODO: fork and add as plugin
" customized theme here https://github.com/dracula/vim/blob/master/colors/dracula.vim
" https://github.com/dracula/dracula-theme#color-palette
hi! link Type DraculaPink
hi! link Todo DraculaYellow
" for ocaml, variant constructor application
hi! link Function DraculaCyan
"hi! link Statement DraculaYellow
" for ocaml, let
hi! link Conditional DraculaCyan
" equals sign
hi! link Keyword DraculaPink
hi! link Search DraculaCyanItalic

" always show gutter
let g:ale_sign_column_always = 1
"let g:ale_linters_explicit = 1

let g:ale_fix_on_save = 1
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'reason': ['refmt'],
\   'ocaml': ['ocamlformat'],
\   'xml': ['xmllint'],
\}

" https://shapeshed.com/vim-netrw/
let g:netrw_banner = 0
let g:netrw_browse_split = 0
"let g:netrw_winsize = 25
let g:netrw_liststyle = 3
let g:netrw_sort_direction = 'normal'

inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

let g:comments_map_keys = 0
" key-mappings for comment line in normal mode
noremap  <silent> <C-L> :call CommentLine()<CR>
" key-mappings for range comment lines in visual <Shift-V> mode
vnoremap <silent> <C-L> :call RangeCommentLine()<CR>
" key-mappings for un-comment line in normal mode
noremap  <silent> <C-K> :call UnCommentLine()<CR>
" key-mappings for range un-comment lines in visual <Shift-V> mode
vnoremap <silent> <C-K> :call RangeUnCommentLine()<CR>

" switch buffer
nnoremap <C-N> :bnext<CR>
nnoremap <C-M> :bprevious<CR>

nmap <silent> - :Explore<CR>

autocmd FileType c,cpp,java,scala autocmd BufWritePre <buffer> :%s/\s\+$//e
autocmd FileType ocaml nnoremap <buffer> <Leader>l :MerlinLocate<CR>
autocmd FileType ocaml nnoremap <buffer> <Leader>nn :MerlinRename<Space>

" opens netrw when no file is chosen
" use :bd to close and :Rex to resume
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | Explore | endif

let g:deoplete#enable_at_startup = 0
autocmd InsertEnter * call deoplete#enable()

let mapleader = ","
let no_ocaml_maps=1

" clear current search
nnoremap <leader><space> :noh<cr>

" use tab to jump between paired brackets
nnoremap <tab> %
vnoremap <tab> %

nnoremap ; :

" open .vimrc
nnoremap <leader>ev <C-w><C-v><C-l>:e $MYVIMRC<cr>
" open a new copy of this window to the right
nnoremap <leader>w <C-w>v<C-w>l

let g:airline_extensions = ['esy', 'reason']
let g:reasonml_project_airline=1
let g:reasonml_clean_project_airline=1
let g:airline#extensions#whitespace#enabled = 0
"let g:airline_powerline_fonts = 1
let g:airline_skip_empty_sections = 1

"let g:reasonml_syntastic_airline=1
"let g:syntastic_always_populate_loc_list = 1
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']
